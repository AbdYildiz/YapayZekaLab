
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder

data=pd.read_csv("telefon_fiyat_değişimi.csv")
print(data)



label_encoder=LabelEncoder().fit(data.price_range)
labels=label_encoder.transform(data.price_range)
classes=list(label_encoder.classes_)

x=data.drop(["price_range"],axis=1)
y=labels

#verilerin standartlaştırılması
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x=sc.fit_transform(x)
print(x)

#eğitim ve test verilerinin hazırlanması
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test =train_test_split(x,y, test_size=0.2)

#çıktı değerlerini katogorileştirme  #binary formatına çevrildi
from tensorflow.keras.utils import to_categorical
y_train=to_categorical(y_train)
y_test=to_categorical(y_test)

#ysa modelinin oluşturulması

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
model=Sequential()
model.add(Dense(16,input_dim=20,activation="relu")) #girdi katmanı

model.add(Dense(12,activation="relu")) #ara katman
model.add(Dense(8,activation="relu"))
model.add(Dense(6,activation="relu"))


model.add(Dense(4,activation="softmax")) #çıktı katmanı 4 tane sınıf olduğu için 4 nöron
model.summary()

#modelin derlenmesi
model.compile(loss="categorical_crossentropy", optimizer="adam",metrics=["accuracy"])

#modelin derlenmesi
model.fit(x_train,y_train, validation_data=(x_test,y_test),epochs=50)

#gerekli değerlerin yazdırılması
print("Ortalama eğitim kaybı: ",np.mean(model.history.history["loss"]))

print("Ortalama eğitim başarımı: ",np.mean(model.history.history["accuracy"]))

print("Ortalama doğrulama kaybı: ",np.mean(model.history.history["val_loss"]))

print("Ortalama doğrulama başarımı: ",np.mean(model.history.history["val_accuracy"]))

#eğitim ve doğrulama başarımlarının gösterilmesi

import matplotlib.pyplot as plt
plt.plot(model.history.history["accuracy"])
plt.plot(model.history.history["val_accuracy"])
plt.title("Model Başarımı")
plt.ylabel("Başarım")
plt.xlabel("epok")
plt.legend(["Eğitim","Test"],loc="upper left")
plt.show()

####################################################
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from scipy.stats import sem
from numpy import mean
from numpy import std
from sklearn.datasets import make_classification
from sklearn.model_selection import RepeatedKFold
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression
from matplotlib import pyplot


data=pd.read_csv("C://Users//furka//OneDrive//Masaüstü//telefon_fiyat_değişimi.csv")
print(data)



#Sınıf Sayısı Belirleme
label_encoder=LabelEncoder().fit(data.price_range)
labels=label_encoder.transform(data.price_range)
classes=list(label_encoder.classes_)

x=data.drop(["price_range"],axis=1)
y=labels

#verilerin standartlaştırılması
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x=sc.fit_transform(x)
print(x)



def evaluate_model(x, y, repeats):
	# prepare the cross-validation procedure
	cv = RepeatedKFold(n_splits=10, n_repeats=repeats, random_state=1)
	# create model
	model = LogisticRegression()
	# evaluate model
	scores = cross_val_score(model, x, y, scoring='accuracy', cv=cv, n_jobs=-1)
	return scores


x, y = make_classification(n_samples=1000, n_features=20, n_informative=15, n_redundant=5, random_state=1)

repeats = range(1,16)
results = list()
for r in repeats:
	
	scores = evaluate_model(x, y, r)
	
	print('>%d mean=%.4f se=%.3f' % (r, mean(scores), sem(scores)))
	
	results.append(scores)

pyplot.boxplot(results, labels=[str(r) for r in repeats], showmeans=True)
pyplot.show()
####################################################
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder

data=pd.read_csv("C://Users//furka//OneDrive//Masaüstü//telefon_fiyat_değişimi.csv")

data=data.drop(["blue"],axis=1)
data=data.drop(["fc"],axis=1)
data=data.drop(["int_memory"],axis=1)
data=data.drop(["ram"],axis=1)
data=data.drop(["wifi"],axis=1)
print(data)

#Sınıf Sayısı Belirleme
label_encoder=LabelEncoder().fit(data.price_range)
labels=label_encoder.transform(data.price_range)
classes=list(label_encoder.classes_)

x=data.drop(["price_range"],axis=1)
y=labels

#verilerin standartlaştırılması
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x=sc.fit_transform(x)
print(x)

#eğitim ve test verilerinin hazırlanması


from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test =train_test_split(x,y, test_size=0.2)


#çıktı değerlerini katogorileştirme  #binary formatına çevrildi
from tensorflow.keras.utils import to_categorical
y_train=to_categorical(y_train)
y_test=to_categorical(y_test)

#ysa modelinin oluşturulması

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
model=Sequential()
model.add(Dense(16,input_dim=15,activation="relu")) #girdi katmanı
model.add(Dense(12,activation="relu")) #ara katman
model.add(Dense(8,activation="relu"))
model.add(Dense(6,activation="relu"))
model.add(Dense(4,activation="softmax")) #çıktı katmanı 4 tane sınıf olduğu için 4 nöron
model.summary()

#modelin derlenmesi

model.compile(loss="categorical_crossentropy", optimizer="adam",metrics=["accuracy"])

#modelin eğitilmesi
model.fit(x_train,y_train, validation_data=(x_test,y_test),epochs=50)

#çapraz doğrulama


#gerekli değerlerin yazdırılması
print("Ortalama eğitim kaybı: ",np.mean(model.history.history["loss"]))

print("Ortalama eğitim başarımı: ",np.mean(model.history.history["accuracy"]))

print("Ortalama doğrulama kaybı: ",np.mean(model.history.history["val_loss"]))

print("Ortalama doğrulama başarımı: ",np.mean(model.history.history["val_accuracy"]))

#eğitim ve doğrulama başarımlarının gösterilmesi

import matplotlib.pyplot as plt
plt.plot(model.history.history["accuracy"])
plt.plot(model.history.history["val_accuracy"])
plt.title("Model Başarımı")
plt.ylabel("Başarım")
plt.xlabel("epok")
plt.legend(["Eğitim","Test"],loc="upper left")
plt.show()
####################################################
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder

data=pd.read_csv("diyabet.csv")
print(data)

#Sınıf Sayısı Belirleme
label_encoder=LabelEncoder().fit(data.output)
labels=label_encoder.transform(data.output)
classes=list(label_encoder.classes_)


x=data.drop(["output"],axis=1)
y=labels

#verileri bölme
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)

#verileri eğitme
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression


clf_tree = DecisionTreeClassifier();
clf_reg = LogisticRegression();

clf_tree.fit(x_train, y_train); 
clf_reg.fit(x_train, y_train);

#modellerin test edilmesi

y_score1 = clf_tree.predict_proba(x_test)[:,1]
y_score2 = clf_reg.predict_proba(x_test)[:,1]

#true false durumların incelenmesi
from sklearn.metrics import roc_curve, roc_auc_score
false_positive_rate1, true_positive_rate1, threshold1 = roc_curve(y_test, y_score1)
false_positive_rate2, true_positive_rate2, threshold2 = roc_curve(y_test, y_score2)

#auc skor işlemi
print('roc_auc_score for DecisionTree: ', roc_auc_score(y_test, y_score1))
print('roc_auc_score for Logistic Regression: ', roc_auc_score(y_test, y_score2))


#cizdirme

#oran 1
import matplotlib.pyplot as plt
plt.subplots(1, figsize=(10,10))
plt.title('Receiver Operating Characteristic - DecisionTree')
plt.plot(false_positive_rate1, true_positive_rate1)
plt.plot([0, 1], ls="--")
plt.plot([0, 0], [1, 0] , c=".7"), plt.plot([1, 1] , c=".7")
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()


#oran2
plt.subplots(1, figsize=(10,10))
plt.title('Receiver Operating Characteristic - Logistic regression')
plt.plot(false_positive_rate2, true_positive_rate2)
plt.plot([0, 1], ls="--")
plt.plot([0, 0], [1, 0] , c=".7"), plt.plot([1, 1] , c=".7")
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()